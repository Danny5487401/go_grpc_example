{
  "name": "go_package_example",
  "version": "1.0.0",
  "description": "![grpc](./img/golang.jpeg) ## 第一章 rpc实现选项 ## 第二章 服务注册中心consul ## 第三章 日志库zap     a. 源码结构     b. 控制台输出     c. 文件输出 ## 第四章 消息队列     1. rabbitmq         a. 消费者：推拉模式         b. 生产者     2. rocketmq         a. 消费者：简单消费,延迟消费         b. 生产者：简单消息，延迟消息，事务消息 ## 第五章 配置文件中心nacos ## 第六章 数据库操作     5.1 GORM         a. GORM原理及实现          b. 连接池使用     5.2 XORM         a. 主从连接     5.3 MongoDB     5.4 Redis         a. 开源库redigo使用 ## 第七章 Go-Micro框架 ## 第八章 GRPC编程 ## 第九章 GRPC生态中间件 ## 第十章 链路追踪结合XORM ## 6. 获取对外可用IP和端口 ## 7. gin验证器 ## 8. grpc负载均衡 ## 9. 错误和异常处理 ## 10. grpc拦截器 ## 11. json实现rpc ## 12. http实现rpc ## 13. grpc错误抛出与捕获 ## 14. metadata编程 ## 15. grpc带头部token ## 16. rpc结构演变new_helloWorld ## 17. proto字段验证器 ## 19. 熔断和限流     a. 流量控制 ## 21. 配置文件获取 viper_test ## 22. ETCD",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://Danny5487401:xx5487401@github.com/Danny5487401/go_package_example.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/Danny5487401/go_package_example/issues"
  },
  "homepage": "https://github.com/Danny5487401/go_package_example#readme",
  "devDependencies": {
    "cz-conventional-changelog": "^3.3.0"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  }
}
